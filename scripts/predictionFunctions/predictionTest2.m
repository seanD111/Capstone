function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 02-Jan-2016 03:15:24.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 13xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 5xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [0;-0.918006102872602;-1.40519896281409;-0.886819053712128;-1.25638483749384;-1.05684900022516;-1.40559298895344;-1.15983029078775;-1.4804491978501;-1.21344081935975;-1.17068800766467;-1.11345946715343;-1.27953649185264];
x1_step1_gain = [0.274276638782586;0.966372167670149;0.924472793378271;0.925452889597233;0.893992707100541;0.913577897687059;0.971071313614911;1.04413027394175;0.881690725079722;1.00413718182;1.02220244948345;1.00951919315899;0.931087673186128];
x1_step1_ymin = -1;

% Layer 1
b1 = [-3.4594533965999035;-4.0797464277784732;0.65121112523859315;-1.0031434809063187;-0.058021779495931201;-1.1176486941522512;1.2841072899499446;-0.30322565930110085;0.21615973977461267;2.1698012382580267];
IW1_1 = [2.7600333730731683 -0.87134421152616215 1.7756594067524119 -0.36614116932183483 0.90309800059860912 -0.12980726091699682 -0.28411128547536918 0.084200266849606367 -0.2396224009615035 -0.41935754549975801 -0.68468128879630885 -0.38190151169270697 0.99976727103436125;1.7209884779110678 3.2068034010864892 1.2958830111315893 0.86681453538887943 0.77021847535862686 1.4879832506453359 0.28541153387560247 1.0706189481984403 0.62385018330434505 0.28281235579869907 1.4572802199687391 -0.17916048751326638 0.85403744011457816;3.9971641815646537 1.4603972195217017 -0.66781546285133475 0.46511930665043572 -2.8114509235691236 0.92686532179778414 -1.7997118779858134 0.72875036314867714 0.39467874355488286 0.45157777101754459 -1.2046951429069479 2.0373895187924549 -0.79065171363320674;0.47674621482603696 -0.26610909422713008 0.54850824191766911 -0.35008268997748071 1.0465247238339952 -0.18254137239144871 -0.30329186102166078 1.1289783436712904 -0.64276550189831516 -0.077939569925242702 -0.21959139086165103 -0.73149484015310551 0.66281369876960994;-0.3443355659397217 -0.18174512386108957 -0.41225258445620599 0.016351711163766002 -0.75537374226742593 0.1183730108977632 0.29766447701360688 -1.1820035725749456 0.70016736462051643 -0.32518859138112188 0.42762729834949209 -0.38478941388989529 -0.53256822686540939;-5.5059441944626446 0.5535904856185957 2.6201795011378604 1.2603947879372408 -0.68143665515803398 -1.0298646347378486 -0.020648225035974486 1.8979474588325251 -0.28753595009589439 0.60486541881048639 0.2610476423108366 0.21873723785573237 -0.17175816832200072;0.9230098529343842 -2.5865941810204665 0.69823758929922264 -0.26546725696515017 0.052318722451905414 -0.28611319480726394 0.4019632302624202 0.7452457712740943 0.20812276898621293 -0.49084573536789755 1.2613897541953385 -1.5102261748874179 0.2507934351393552;-3.4470012077318781 -1.5136822599830126 -1.7375614993498878 -2.3469877476166543 -0.62938255968296297 -1.2359926123847222 -0.49632748984676062 -0.97942001763149911 -0.79133212783037177 -0.74107520656822101 -0.11929590698801697 0.53413287083142857 -0.58925342768642097;3.0346009575557629 -0.93535857920858134 -0.36289210132265942 1.8118424613813573 -0.56100534588084949 0.89786868134796627 -0.88497775271721679 0.48286497503983394 -0.29568375502339928 0.10742042396702059 -0.17099366583082973 -0.24962291086639779 -1.7015278410867127;-0.10346099860171279 -2.7316872057480874 -0.14692244817255198 0.369082188250965 -0.16316087879928778 -1.0612652100147382 -0.65653986072476256 0.47063578378807719 -0.64564820601053186 0.046222987701440017 -1.0886987985999237 0.35414256662082361 -0.63051450295974476];

% Layer 2
b2 = [-14.097845734514411;-5.8273455345036327;7.9339273674538697;10.30208417442894;1.7863547029436693];
LW2_1 = [1.9583228808576316 7.4308611540550977 8.401470691560819 -4.4683878220552371 3.0105997309938388 -4.8728229238427865 3.2896653022210129 -3.0079770978219766 -3.9853105455872213 4.4088901627080892;7.8909944077522383 1.8892559899860084 -2.632502970844397 -1.9754507869674465 -2.0267261770421126 -0.91812073058842536 1.9261711612626942 -11.101895022655651 -2.1891133576678201 3.5950674224253594;-2.1219138622112399 -7.5958310047617346 -0.42103509377447468 2.0776413229396611 0.94929656758934777 4.514188371505691 -0.76733278188534282 5.588456826609475 1.5817506149979692 -7.0241146703332147;-2.655769864788875 -2.8875890287219486 -2.7216668737939664 6.7676455739343053 4.7516417679691241 -0.89542599540046386 -4.2564372754979738 3.4626058275783533 0.64614316186997967 -2.5829387279643092;-4.7394821716758404 1.4845974763811534 -4.0403828081412776 -3.0006399049623926 -6.3053093350112013 3.159032019701963 -0.65306894784315761 6.1951702123426404 3.4602993010525447 0.10023909779652791];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numer = exp(n);
denom = sum(numer,1);
denom(denom == 0) = 1;
a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
